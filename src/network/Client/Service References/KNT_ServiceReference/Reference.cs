//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KNT_Client.KNT_ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/GameLogic")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int currentMarkerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int diceRollField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int goldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool holdingMarkerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool inPhaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int playerNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int turnField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int currentMarkerID {
            get {
                return this.currentMarkerIDField;
            }
            set {
                if ((this.currentMarkerIDField.Equals(value) != true)) {
                    this.currentMarkerIDField = value;
                    this.RaisePropertyChanged("currentMarkerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int diceRoll {
            get {
                return this.diceRollField;
            }
            set {
                if ((this.diceRollField.Equals(value) != true)) {
                    this.diceRollField = value;
                    this.RaisePropertyChanged("diceRoll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int gold {
            get {
                return this.goldField;
            }
            set {
                if ((this.goldField.Equals(value) != true)) {
                    this.goldField = value;
                    this.RaisePropertyChanged("gold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool holdingMarker {
            get {
                return this.holdingMarkerField;
            }
            set {
                if ((this.holdingMarkerField.Equals(value) != true)) {
                    this.holdingMarkerField = value;
                    this.RaisePropertyChanged("holdingMarker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool inPhase {
            get {
                return this.inPhaseField;
            }
            set {
                if ((this.inPhaseField.Equals(value) != true)) {
                    this.inPhaseField = value;
                    this.RaisePropertyChanged("inPhase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int playerNumber {
            get {
                return this.playerNumberField;
            }
            set {
                if ((this.playerNumberField.Equals(value) != true)) {
                    this.playerNumberField = value;
                    this.RaisePropertyChanged("playerNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int turn {
            get {
                return this.turnField;
            }
            set {
                if ((this.turnField.Equals(value) != true)) {
                    this.turnField = value;
                    this.RaisePropertyChanged("turn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Phase", Namespace="http://schemas.datacontract.org/2004/07/GameLogic")]
    [System.SerializableAttribute()]
    public partial class Phase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="KNT_ServiceReference.IKNTNet")]
    public interface IKNTNet {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNTNet/GetData", ReplyAction="http://tempuri.org/IKNTNet/GetDataResponse")]
        string GetData(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNTNet/addPlayer", ReplyAction="http://tempuri.org/IKNTNet/addPlayerResponse")]
        KNT_Client.KNT_ServiceReference.Player addPlayer(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNTNet/getCurrentPhase", ReplyAction="http://tempuri.org/IKNTNet/getCurrentPhaseResponse")]
        KNT_Client.KNT_ServiceReference.Phase getCurrentPhase();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNTNet/CreateGame", ReplyAction="http://tempuri.org/IKNTNet/CreateGameResponse")]
        void CreateGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNTNet/getGame", ReplyAction="http://tempuri.org/IKNTNet/getGameResponse")]
        GameLogic.GameBoard getGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNTNet/getPlayers", ReplyAction="http://tempuri.org/IKNTNet/getPlayersResponse")]
        KNT_Client.KNT_ServiceReference.Player[] getPlayers();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IKNTNetChannel : KNT_Client.KNT_ServiceReference.IKNTNet, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KNTNetClient : System.ServiceModel.ClientBase<KNT_Client.KNT_ServiceReference.IKNTNet>, KNT_Client.KNT_ServiceReference.IKNTNet {
        
        public KNTNetClient() {
        }
        
        public KNTNetClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public KNTNetClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KNTNetClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KNTNetClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(string value) {
            return base.Channel.GetData(value);
        }
        
        public KNT_Client.KNT_ServiceReference.Player addPlayer(string name) {
            return base.Channel.addPlayer(name);
        }
        
        public KNT_Client.KNT_ServiceReference.Phase getCurrentPhase() {
            return base.Channel.getCurrentPhase();
        }
        
        public void CreateGame() {
            base.Channel.CreateGame();
        }
        
        public GameLogic.GameBoard getGame() {
            return base.Channel.getGame();
        }
        
        public KNT_Client.KNT_ServiceReference.Player[] getPlayers() {
            return base.Channel.getPlayers();
        }
    }
}
