//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KNT_Client.KNT_SrvRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/GameLogic")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<KNT_Client.KNT_SrvRef.SpecialCharacter> charactersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int currentMarkerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int diceRollField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int goldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int goldYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool holdingMarkerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool inPhaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, bool> mymarkersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Tile> ownedTilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int playerNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, KNT_Client.KNT_SrvRef.Thing> rackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Thing> thingsInPlayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int turnField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<KNT_Client.KNT_SrvRef.SpecialCharacter> characters {
            get {
                return this.charactersField;
            }
            set {
                if ((object.ReferenceEquals(this.charactersField, value) != true)) {
                    this.charactersField = value;
                    this.RaisePropertyChanged("characters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int currentMarkerID {
            get {
                return this.currentMarkerIDField;
            }
            set {
                if ((this.currentMarkerIDField.Equals(value) != true)) {
                    this.currentMarkerIDField = value;
                    this.RaisePropertyChanged("currentMarkerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int diceRoll {
            get {
                return this.diceRollField;
            }
            set {
                if ((this.diceRollField.Equals(value) != true)) {
                    this.diceRollField = value;
                    this.RaisePropertyChanged("diceRoll");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int gold {
            get {
                return this.goldField;
            }
            set {
                if ((this.goldField.Equals(value) != true)) {
                    this.goldField = value;
                    this.RaisePropertyChanged("gold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int goldY {
            get {
                return this.goldYField;
            }
            set {
                if ((this.goldYField.Equals(value) != true)) {
                    this.goldYField = value;
                    this.RaisePropertyChanged("goldY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool holdingMarker {
            get {
                return this.holdingMarkerField;
            }
            set {
                if ((this.holdingMarkerField.Equals(value) != true)) {
                    this.holdingMarkerField = value;
                    this.RaisePropertyChanged("holdingMarker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool inPhase {
            get {
                return this.inPhaseField;
            }
            set {
                if ((this.inPhaseField.Equals(value) != true)) {
                    this.inPhaseField = value;
                    this.RaisePropertyChanged("inPhase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, bool> mymarkers {
            get {
                return this.mymarkersField;
            }
            set {
                if ((object.ReferenceEquals(this.mymarkersField, value) != true)) {
                    this.mymarkersField = value;
                    this.RaisePropertyChanged("mymarkers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Tile> ownedTiles {
            get {
                return this.ownedTilesField;
            }
            set {
                if ((object.ReferenceEquals(this.ownedTilesField, value) != true)) {
                    this.ownedTilesField = value;
                    this.RaisePropertyChanged("ownedTiles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int playerNumber {
            get {
                return this.playerNumberField;
            }
            set {
                if ((this.playerNumberField.Equals(value) != true)) {
                    this.playerNumberField = value;
                    this.RaisePropertyChanged("playerNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, KNT_Client.KNT_SrvRef.Thing> rack {
            get {
                return this.rackField;
            }
            set {
                if ((object.ReferenceEquals(this.rackField, value) != true)) {
                    this.rackField = value;
                    this.RaisePropertyChanged("rack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Thing> thingsInPlay {
            get {
                return this.thingsInPlayField;
            }
            set {
                if ((object.ReferenceEquals(this.thingsInPlayField, value) != true)) {
                    this.thingsInPlayField = value;
                    this.RaisePropertyChanged("thingsInPlay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int turn {
            get {
                return this.turnField;
            }
            set {
                if ((this.turnField.Equals(value) != true)) {
                    this.turnField = value;
                    this.RaisePropertyChanged("turn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpecialCharacter", Namespace="http://schemas.datacontract.org/2004/07/GameLogic")]
    [System.SerializableAttribute()]
    public partial class SpecialCharacter : KNT_Client.KNT_SrvRef.Thing {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tile", Namespace="http://schemas.datacontract.org/2004/07/GameLogic")]
    [System.SerializableAttribute()]
    public partial class Tile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool combatFlaggedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool faceUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fortLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int hexNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string hexTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int nHexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int neHexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int nwHexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Thing> p1StackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Thing> p2StackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Thing> p3StackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Thing> p4StackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private KNT_Client.KNT_SrvRef.Player playerAbleToStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private KNT_Client.KNT_SrvRef.Player playerControlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool playerControlBoolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool roughField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int sHexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int seHexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool startPossibleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int swHexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool traversedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool combatFlagged {
            get {
                return this.combatFlaggedField;
            }
            set {
                if ((this.combatFlaggedField.Equals(value) != true)) {
                    this.combatFlaggedField = value;
                    this.RaisePropertyChanged("combatFlagged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool faceUp {
            get {
                return this.faceUpField;
            }
            set {
                if ((this.faceUpField.Equals(value) != true)) {
                    this.faceUpField = value;
                    this.RaisePropertyChanged("faceUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fortLevel {
            get {
                return this.fortLevelField;
            }
            set {
                if ((this.fortLevelField.Equals(value) != true)) {
                    this.fortLevelField = value;
                    this.RaisePropertyChanged("fortLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int hexNumber {
            get {
                return this.hexNumberField;
            }
            set {
                if ((this.hexNumberField.Equals(value) != true)) {
                    this.hexNumberField = value;
                    this.RaisePropertyChanged("hexNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string hexType {
            get {
                return this.hexTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.hexTypeField, value) != true)) {
                    this.hexTypeField = value;
                    this.RaisePropertyChanged("hexType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int nHex {
            get {
                return this.nHexField;
            }
            set {
                if ((this.nHexField.Equals(value) != true)) {
                    this.nHexField = value;
                    this.RaisePropertyChanged("nHex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int neHex {
            get {
                return this.neHexField;
            }
            set {
                if ((this.neHexField.Equals(value) != true)) {
                    this.neHexField = value;
                    this.RaisePropertyChanged("neHex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int nwHex {
            get {
                return this.nwHexField;
            }
            set {
                if ((this.nwHexField.Equals(value) != true)) {
                    this.nwHexField = value;
                    this.RaisePropertyChanged("nwHex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Thing> p1Stack {
            get {
                return this.p1StackField;
            }
            set {
                if ((object.ReferenceEquals(this.p1StackField, value) != true)) {
                    this.p1StackField = value;
                    this.RaisePropertyChanged("p1Stack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Thing> p2Stack {
            get {
                return this.p2StackField;
            }
            set {
                if ((object.ReferenceEquals(this.p2StackField, value) != true)) {
                    this.p2StackField = value;
                    this.RaisePropertyChanged("p2Stack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Thing> p3Stack {
            get {
                return this.p3StackField;
            }
            set {
                if ((object.ReferenceEquals(this.p3StackField, value) != true)) {
                    this.p3StackField = value;
                    this.RaisePropertyChanged("p3Stack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Thing> p4Stack {
            get {
                return this.p4StackField;
            }
            set {
                if ((object.ReferenceEquals(this.p4StackField, value) != true)) {
                    this.p4StackField = value;
                    this.RaisePropertyChanged("p4Stack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public KNT_Client.KNT_SrvRef.Player playerAbleToStart {
            get {
                return this.playerAbleToStartField;
            }
            set {
                if ((object.ReferenceEquals(this.playerAbleToStartField, value) != true)) {
                    this.playerAbleToStartField = value;
                    this.RaisePropertyChanged("playerAbleToStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public KNT_Client.KNT_SrvRef.Player playerControl {
            get {
                return this.playerControlField;
            }
            set {
                if ((object.ReferenceEquals(this.playerControlField, value) != true)) {
                    this.playerControlField = value;
                    this.RaisePropertyChanged("playerControl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool playerControlBool {
            get {
                return this.playerControlBoolField;
            }
            set {
                if ((this.playerControlBoolField.Equals(value) != true)) {
                    this.playerControlBoolField = value;
                    this.RaisePropertyChanged("playerControlBool");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool rough {
            get {
                return this.roughField;
            }
            set {
                if ((this.roughField.Equals(value) != true)) {
                    this.roughField = value;
                    this.RaisePropertyChanged("rough");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int sHex {
            get {
                return this.sHexField;
            }
            set {
                if ((this.sHexField.Equals(value) != true)) {
                    this.sHexField = value;
                    this.RaisePropertyChanged("sHex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int seHex {
            get {
                return this.seHexField;
            }
            set {
                if ((this.seHexField.Equals(value) != true)) {
                    this.seHexField = value;
                    this.RaisePropertyChanged("seHex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool startPossible {
            get {
                return this.startPossibleField;
            }
            set {
                if ((this.startPossibleField.Equals(value) != true)) {
                    this.startPossibleField = value;
                    this.RaisePropertyChanged("startPossible");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int swHex {
            get {
                return this.swHexField;
            }
            set {
                if ((this.swHexField.Equals(value) != true)) {
                    this.swHexField = value;
                    this.RaisePropertyChanged("swHex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool traversed {
            get {
                return this.traversedField;
            }
            set {
                if ((this.traversedField.Equals(value) != true)) {
                    this.traversedField = value;
                    this.RaisePropertyChanged("traversed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Thing", Namespace="http://schemas.datacontract.org/2004/07/GameLogic")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(KNT_Client.KNT_SrvRef.SpecialCharacter))]
    public partial class Thing : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int combatValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int goldValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string hexTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool inBankField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isOwnedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool onRackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string typeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int combatValue {
            get {
                return this.combatValueField;
            }
            set {
                if ((this.combatValueField.Equals(value) != true)) {
                    this.combatValueField = value;
                    this.RaisePropertyChanged("combatValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int goldValue {
            get {
                return this.goldValueField;
            }
            set {
                if ((this.goldValueField.Equals(value) != true)) {
                    this.goldValueField = value;
                    this.RaisePropertyChanged("goldValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string hexType {
            get {
                return this.hexTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.hexTypeField, value) != true)) {
                    this.hexTypeField = value;
                    this.RaisePropertyChanged("hexType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool inBank {
            get {
                return this.inBankField;
            }
            set {
                if ((this.inBankField.Equals(value) != true)) {
                    this.inBankField = value;
                    this.RaisePropertyChanged("inBank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isOwned {
            get {
                return this.isOwnedField;
            }
            set {
                if ((this.isOwnedField.Equals(value) != true)) {
                    this.isOwnedField = value;
                    this.RaisePropertyChanged("isOwned");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool onRack {
            get {
                return this.onRackField;
            }
            set {
                if ((this.onRackField.Equals(value) != true)) {
                    this.onRackField = value;
                    this.RaisePropertyChanged("onRack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string type {
            get {
                return this.typeField;
            }
            set {
                if ((object.ReferenceEquals(this.typeField, value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Phase", Namespace="http://schemas.datacontract.org/2004/07/GameLogic")]
    [System.SerializableAttribute()]
    public partial class Phase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Player> _playersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private KNT_Client.KNT_SrvRef.Player currentPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string currentStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Player> _players {
            get {
                return this._playersField;
            }
            set {
                if ((object.ReferenceEquals(this._playersField, value) != true)) {
                    this._playersField = value;
                    this.RaisePropertyChanged("_players");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public KNT_Client.KNT_SrvRef.Player currentPlayer {
            get {
                return this.currentPlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.currentPlayerField, value) != true)) {
                    this.currentPlayerField = value;
                    this.RaisePropertyChanged("currentPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string currentState {
            get {
                return this.currentStateField;
            }
            set {
                if ((object.ReferenceEquals(this.currentStateField, value) != true)) {
                    this.currentStateField = value;
                    this.RaisePropertyChanged("currentState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Board", Namespace="http://schemas.datacontract.org/2004/07/GameLogic")]
    [System.SerializableAttribute()]
    public partial class Board : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Tile> tilesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Tile> tiles {
            get {
                return this.tilesField;
            }
            set {
                if ((object.ReferenceEquals(this.tilesField, value) != true)) {
                    this.tilesField = value;
                    this.RaisePropertyChanged("tiles");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameBoard", Namespace="http://schemas.datacontract.org/2004/07/GameLogic.Managers")]
    [System.SerializableAttribute()]
    public partial class GameBoard : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private KNT_Client.KNT_SrvRef.Board theBoardField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public KNT_Client.KNT_SrvRef.Board theBoard {
            get {
                return this.theBoardField;
            }
            set {
                if ((object.ReferenceEquals(this.theBoardField, value) != true)) {
                    this.theBoardField = value;
                    this.RaisePropertyChanged("theBoard");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="KNT_SrvRef.IKNTNet")]
    public interface IKNTNet {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNTNet/addPlayer", ReplyAction="http://tempuri.org/IKNTNet/addPlayerResponse")]
        KNT_Client.KNT_SrvRef.Player addPlayer(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNTNet/getCurrentPhase", ReplyAction="http://tempuri.org/IKNTNet/getCurrentPhaseResponse")]
        KNT_Client.KNT_SrvRef.Phase getCurrentPhase();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNTNet/setCurrentPhase", ReplyAction="http://tempuri.org/IKNTNet/setCurrentPhaseResponse")]
        void setCurrentPhase();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNTNet/getPlayers", ReplyAction="http://tempuri.org/IKNTNet/getPlayersResponse")]
        System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Player> getPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNTNet/getCurrentPlayer", ReplyAction="http://tempuri.org/IKNTNet/getCurrentPlayerResponse")]
        KNT_Client.KNT_SrvRef.Player getCurrentPlayer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNTNet/getMap", ReplyAction="http://tempuri.org/IKNTNet/getMapResponse")]
        KNT_Client.KNT_SrvRef.Board getMap();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNTNet/connect", ReplyAction="http://tempuri.org/IKNTNet/connectResponse")]
        KNT_Client.KNT_SrvRef.GameBoard connect(string player);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IKNTNetChannel : KNT_Client.KNT_SrvRef.IKNTNet, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KNTNetClient : System.ServiceModel.ClientBase<KNT_Client.KNT_SrvRef.IKNTNet>, KNT_Client.KNT_SrvRef.IKNTNet {
        
        public KNTNetClient() {
        }
        
        public KNTNetClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public KNTNetClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KNTNetClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KNTNetClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public KNT_Client.KNT_SrvRef.Player addPlayer(string name) {
            return base.Channel.addPlayer(name);
        }
        
        public KNT_Client.KNT_SrvRef.Phase getCurrentPhase() {
            return base.Channel.getCurrentPhase();
        }
        
        public void setCurrentPhase() {
            base.Channel.setCurrentPhase();
        }
        
        public System.Collections.Generic.List<KNT_Client.KNT_SrvRef.Player> getPlayers() {
            return base.Channel.getPlayers();
        }
        
        public KNT_Client.KNT_SrvRef.Player getCurrentPlayer() {
            return base.Channel.getCurrentPlayer();
        }
        
        public KNT_Client.KNT_SrvRef.Board getMap() {
            return base.Channel.getMap();
        }
        
        public KNT_Client.KNT_SrvRef.GameBoard connect(string player) {
            return base.Channel.connect(player);
        }
    }
}
